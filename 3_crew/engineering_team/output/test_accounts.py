import unittest\nfrom accounts import Account, get_share_price\n\nclass TestAccount(unittest.TestCase):\n\n    def setUp(self):\n        self.account = Account(\"test_user\", 1000.0)\n\n    def test_initialization(self):\n        self.assertEqual(self.account.username, \"test_user\")\n        self.assertEqual(self.account.balance, 1000.0)\n        self.assertEqual(self.account.holdings, {})\n        self.assertEqual(self.account.transactions, [])\n\n    def test_deposit(self):\n        self.account.deposit(500.0)\n        self.assertEqual(self.account.balance, 1500.0)\n        self.assertEqual(len(self.account.transactions), 1)\n        self.assertIn(\"Deposited: 500.0\", self.account.transactions)\n\n    def test_deposit_negative(self):\n        with self.assertRaises(ValueError):\n            self.account.deposit(-100.0)\n\n    def test_withdraw(self):\n        self.account.withdraw(200.0)\n        self.assertEqual(self.account.balance, 800.0)\n        self.assertEqual(len(self.account.transactions), 1)\n        self.assertIn(\"Withdrew: 200.0\", self.account.transactions)\n\n    def test_withdraw_insufficient_funds(self):\n        with self.assertRaises(ValueError):\n            self.account.withdraw(1500.0)\n\n    def test_buy_shares(self):\n        self.account.buy_shares(\"AAPL\", 2)\n        self.assertEqual(self.account.balance, 700.0)\n        self.assertEqual(self.account.holdings[\"AAPL\"], 2)\n        self.assertIn(\"Bought: 2 shares of AAPL at 150.0 each\", self.account.transactions)\n\n    def test_buy_shares_insufficient_funds(self):\n        with self.assertRaises(ValueError):\n            self.account.buy_shares(\"TSLA\", 2)\n\n    def test_sell_shares(self):\n        self.account.buy_shares(\"AAPL\", 1)\n        self.account.sell_shares(\"AAPL\", 1)\n        self.assertEqual(self.account.balance, 850.0)\n        self.assertNotIn(\"AAPL\", self.account.holdings)\n        self.assertIn(\"Sold: 1 shares of AAPL at 150.0 each\", self.account.transactions)\n\n    def test_sell_shares_insufficient(self):\n        with self.assertRaises(ValueError):\n            self.account.sell_shares(\"AAPL\", 1)\n\n    def test_calculate_portfolio_value(self):\n        self.account.buy_shares(\"AAPL\", 1)\n        self.assertEqual(self.account.calculate_portfolio_value(), 850.0)\n\n    def test_report_holdings(self):\n        self.account.buy_shares(\"AAPL\", 2)\n        self.assertEqual(self.account.report_holdings(), {\"AAPL\": 2})\n\n    def test_report_profit_loss(self):\n        self.assertEqual(self.account.report_profit_loss(), 0.0)\n\n    def test_list_transactions(self):\n        self.account.deposit(500.0)\n        self.account.withdraw(200.0)\n        self.assertEqual(len(self.account.list_transactions()), 2)\n\nif __name__ == '__main__':\n    unittest.main()